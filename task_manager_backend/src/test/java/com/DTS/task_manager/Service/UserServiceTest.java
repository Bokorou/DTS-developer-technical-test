package com.DTS.task_manager.Service;

import com.DTS.task_manager.DTO.CreateUserDto;
import com.DTS.task_manager.DTO.LoginDto;
import com.DTS.task_manager.Entity.User;
import com.DTS.task_manager.Repository.UserRepo;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class UserServiceTest {

    @Mock
    private UserRepo userRepo;

    @InjectMocks
    private UserService userService;

    @Test
    void shouldReturnUserIfUsernameExists(){
        User testUser = new User(
                1L, "tester123", "password", Collections.emptyList());
        when(userRepo.findByUsername("tester123")).thenReturn(Optional.of(testUser));

        LoginDto loginDto = new LoginDto("tester123", "password");

        Optional<User> result = userService.login(loginDto);

        assertAll("user",
                () -> assertEquals("tester123", result.get().getUsername()),
                () -> assertEquals("password", result.get().getPassword()),
                () -> assertTrue(result.get().getTasks().isEmpty())
        );
        
    }

    @Test
    void shouldReturnUserIfUserCreated(){
        CreateUserDto createUserDto = new CreateUserDto(
                "bokorou", "password1");
        User savedUser = new User();
        savedUser.setId(1L); // simulate autogenerated ID
        savedUser.setUsername("bokorou");
        savedUser.setPassword("password1");
        savedUser.setTasks(Collections.emptyList());

        when(userRepo.save(any(User.class))).thenReturn(savedUser);

        User result = userService.createUser(createUserDto);

        assertAll("user",
                () -> assertNotNull(result),
                () -> assertNotNull(result.getId()),
                () -> assertEquals("bokorou", result.getUsername()),
                () -> assertEquals("password1", result.getPassword()),
                () -> assertTrue(result.getTasks().isEmpty())
                );
    }

    @Test
    void shouldReturnTaskIfTaskCreated(){

    }

}
